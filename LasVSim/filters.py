# import filterpy
# import numpy as np
# import matplotlib.pyplot as plt
# from filterpy.kalman import KalmanFilter
# from filterpy.common import Q_discrete_white_noise
# import datetime
# import time
# from GAIN_DICT import *
# np.random.seed(2)
#
# class AOFFilter:
#     def __init__(self, type):
#         self.reset()
#         self.x =np.zeros(8)
#         #建立增益字典
#         # Gain_dict = {
#         #     'car': [[[6.68929227e-02, -6.78748560e-04, 3.27870701e-02,
#         #               -6.21942572e-05, 2.87802196e-03, 2.92387784e-04,
#         #               1.46994190e-04],
#         #              [-5.51910186e-04, 6.80973566e-02, -4.06064335e-04,
#         #               3.28999292e-02, -6.46442840e-04, 1.23255317e-04,
#         #               2.05716628e-04],
#         #              [5.60308969e-02, -8.61060187e-04, 1.81134146e-01,
#         #               -6.20867444e-04, 2.15309107e-03, 1.53382056e-04,
#         #               -1.45547775e-04],
#         #              [-1.38803154e-03, 5.68872347e-02, -4.68999406e-04,
#         #               1.81846172e-01, -1.73403919e-03, 9.38032831e-05,
#         #               8.61029877e-04],
#         #              [2.44753214e-04, 1.31796186e-04, 1.96570481e-05,
#         #               2.55573904e-05, 1.31959447e-01, -2.54755434e-05,
#         #               2.52355242e-05],
#         #              [-1.07108361e-04, 2.95182820e-04, -3.73041453e-05,
#         #               2.24851459e-05, 1.61068018e-01, -2.60537963e-04,
#         #               1.19350551e-04],
#         #              [2.05754431e-04, 2.23282316e-03, -1.13570965e-04,
#         #               1.35001246e-04, 7.28869977e-04, 7.65609266e-02,
#         #               -1.88041080e-04],
#         #              [2.13127060e-05, -1.07116246e-03, 1.40920914e-04,
#         #               2.67629513e-04, -2.07124400e-03, -4.73600167e-04,
#         #               3.79162041e-02]]
#         #         ,
#         #             [[6.84369501e-02, -2.92520592e-04, 1.52671914e-02,
#         #               -3.31204020e-04, 4.76527422e-04, 1.29382738e-03,
#         #               -9.07996976e-04],
#         #              [-5.83203864e-04, 6.97225130e-02, -3.08540914e-05,
#         #               1.56914282e-02, 2.00361334e-04, -9.03569936e-04,
#         #               -9.49544773e-04],
#         #              [5.03660387e-02, -6.38153404e-04, 3.27065090e-02,
#         #               -1.31748089e-06, 2.42098215e-04, 8.51288992e-04,
#         #               -9.79164114e-04],
#         #              [-6.35652889e-04, 5.09520093e-02, -7.35045397e-05,
#         #               3.29889955e-02, 4.40247420e-04, 1.77095623e-04,
#         #               -1.91003342e-03],
#         #              [8.46894067e-05, 5.12648632e-05, 9.54546281e-06,
#         #               7.19058265e-05, 7.12395076e-02, 3.71014939e-04,
#         #               -1.17604303e-05],
#         #              [-2.30234865e-04, -1.00274994e-04, -1.13365546e-04,
#         #               -3.98299986e-06, 4.11106306e-02, 7.20645619e-04,
#         #               -9.89221913e-05],
#         #              [5.51587758e-05, -1.45330102e-04, -1.02668006e-04,
#         #               -5.48750906e-05, -8.16977065e-05, 6.49893987e-02,
#         #               2.70455047e-04],
#         #              [-1.13231778e-04, -1.03220510e-04, 1.51014645e-05,
#         #               -4.52429416e-05, 3.21048212e-04, 4.98103832e-04,
#         #               5.76697285e-02]]
#         #         , [[7.99944135e-02, -6.29272201e-04, 2.96271910e-02,
#         #             6.64542573e-04, 9.28690552e-04, 1.05386739e-03,
#         #             -2.29697227e-04, 6.21010467e-03, -8.19008300e-05,
#         #             1.23902008e-03, -1.26202291e-05, -1.70488878e-04,
#         #             -9.47113323e-04, -3.79107935e-05],
#         #            [7.04627934e-05, 8.01739560e-02, 2.11265679e-04,
#         #             2.95470775e-02, 5.21885856e-04, -1.44001007e-03,
#         #             2.99797275e-04, -5.41647226e-05, 6.37118748e-03,
#         #             -5.36338851e-05, 1.30329660e-03, 2.56296081e-04,
#         #             6.67763988e-04, 1.77747025e-04],
#         #            [5.21181958e-02, -6.61939303e-04, 1.86478689e-01,
#         #             -7.21429192e-04, 6.63937767e-04, 2.05390734e-03,
#         #             1.42737315e-04, 3.91317476e-03, -8.42766832e-05,
#         #             7.69599612e-03, -3.25117993e-05, -1.50132818e-04,
#         #             6.03568721e-04, 7.63999153e-04],
#         #            [-3.43968046e-04, 5.24363134e-02, -2.81033107e-04,
#         #             1.86117235e-01, -4.12841127e-03, -1.45047402e-03,
#         #             5.02739948e-04, 2.17535645e-04, 4.08228662e-03,
#         #             -9.46500620e-05, 7.79854356e-03, -4.83207536e-05,
#         #             1.16950104e-03, 2.34871785e-04],
#         #            [-3.00843460e-04, 1.34135101e-04, 7.88808156e-05,
#         #             2.45694820e-04, 1.79725796e-01, 3.57235571e-05,
#         #             -1.12253943e-05, -2.64662190e-05, 1.80763244e-05,
#         #             -1.20731790e-05, -6.64715424e-06, 6.56699238e-03,
#         #             4.16274016e-05, -3.26213134e-05],
#         #            [1.16111398e-04, 6.24285585e-04, 3.60030439e-04,
#         #             5.27484745e-04, 1.86797013e-01, 2.64431267e-04,
#         #             3.30149193e-04, 1.36920123e-05, 6.20002365e-05,
#         #             -6.40889402e-05, 3.75002103e-05, 7.56755399e-03,
#         #             2.50321669e-05, -1.41815459e-04],
#         #            [5.05909296e-04, -2.88364747e-04, 9.23195925e-05,
#         #             -1.52768586e-04, 5.17162870e-04, 7.05541326e-02,
#         #             9.93084918e-04, -4.95039588e-05, 9.99247218e-05,
#         #             -8.11547038e-05, 2.63563971e-05, -3.33977626e-04,
#         #             4.30080871e-02, -1.38238801e-03],
#         #            [-1.12838637e-03, 4.26713247e-04, 6.89596741e-04,
#         #             -1.35173918e-04, -1.18866441e-03, 3.42559959e-04,
#         #             2.87402265e-02, -7.70640607e-06, -1.07611815e-05,
#         #             4.80956289e-05, 1.35496654e-05, -1.98168231e-04,
#         #             -2.23326058e-03, 4.83177878e-02]]
#         #             ]
#         #     ,
#         #      'truck': [
#         #                 # [[4.46093117e-02, 5.71721693e-06, 3.88214727e-02,
#         #     #             3.95287435e-04, 5.08064565e-04, 1.06690368e-03,
#         #     #             5.90997987e-05],
#         #     #            [-2.45022463e-04, 4.81185852e-02, 5.74331053e-05,
#         #     #             3.66177072e-02, 7.09423369e-05, -1.26360977e-03,
#         #     #             -9.00040646e-05],
#         #     #            [2.13116731e-02, 7.69486659e-05, 2.02769967e-01,
#         #     #             -3.67793192e-04, -7.10472388e-04, 2.94255038e-04,
#         #     #             -2.13753769e-05],
#         #     #            [9.23146898e-05, 2.58742413e-02, -6.13301688e-04,
#         #     #             2.04649154e-01, 1.23477337e-03, -2.20432479e-04,
#         #     #             -1.42917550e-04],
#         #     #            [-1.66737212e-04, 1.46378207e-04, -8.11640609e-05,
#         #     #             1.86113479e-04, 1.40798414e-01, -2.32449661e-04,
#         #     #             2.43625807e-05],
#         #     #            [-2.99686104e-04, 2.38466334e-04, -3.46566869e-05,
#         #     #             7.17024008e-05, 1.73195036e-01, -3.09934847e-04,
#         #     #             -1.39375232e-05],
#         #     #            [8.42376493e-04, 5.19941569e-04, 5.25151279e-04,
#         #     #             9.32123904e-05, -2.66540186e-04, 6.15756676e-02,
#         #     #             -1.27191240e-04],
#         #     #            [-5.68737930e-05, 2.27811978e-03, -2.43221119e-04,
#         #     #             3.96389573e-04, -4.00727204e-03, 8.64989334e-04,
#         #     #             2.06604220e-02]],
#         #
#         #          [[4.68218399e-02, -1.58619325e-03, 2.69198315e-02,
#         #           1.44262199e-04, -2.62528814e-02, -1.91569308e-03,
#         #           3.77427471e-04],
#         #          [-1.23293081e-03, 4.68607556e-02, -6.05291532e-03,
#         #           4.21187706e-02, 3.62955998e-03, 3.06504015e-04,
#         #           -4.84605902e-03],
#         #          [1.97265075e-02, 2.76143639e-03, 1.99498109e-01,
#         #           -1.42675719e-02, -7.41136543e-03, -1.78116285e-04,
#         #           5.87765143e-04],
#         #          [-2.21066845e-03, 2.05471596e-02, 1.84899493e-02,
#         #           1.82619554e-01, -2.46345014e-02, 1.40774455e-03,
#         #           -2.77888907e-03],
#         #          [1.58464933e-03, 2.30898616e-03, -2.73299020e-04,
#         #           6.58177277e-04, 1.49817051e-01, -1.88907687e-03,
#         #           7.16674946e-04],
#         #          [-1.48638785e-03, -3.31678849e-03, 9.88101040e-04,
#         #           -5.28862112e-03, 1.56429032e-01, 4.20158870e-03,
#         #           3.00821085e-03],
#         #          [-5.72594795e-03, 3.95220694e-03, 1.53932363e-05,
#         #           -1.35590738e-04, -1.86866802e-02, 6.32002915e-02,
#         #           -4.04221429e-03],
#         #          [1.06218598e-02, -3.16705180e-03, 3.50318539e-03,
#         #           -1.10409542e-02, 1.47344328e-02, 6.56769162e-03,
#         #           3.03302515e-02]],
#         # [[6.84369501e-02, -2.92520592e-04, 1.52671914e-02,
#         #                 -3.31204020e-04, 4.76527422e-04, 1.29382738e-03,
#         #                 -9.07996976e-04],
#         #                [-5.83203864e-04, 6.97225130e-02, -3.08540914e-05,
#         #                 1.56914282e-02, 2.00361334e-04, -9.03569936e-04,
#         #                 -9.49544773e-04],
#         #                [5.03660387e-02, -6.38153404e-04, 3.27065090e-02,
#         #                 -1.31748089e-06, 2.42098215e-04, 8.51288992e-04,
#         #                 -9.79164114e-04],
#         #                [-6.35652889e-04, 5.09520093e-02, -7.35045397e-05,
#         #                 3.29889955e-02, 4.40247420e-04, 1.77095623e-04,
#         #                 -1.91003342e-03],
#         #                [8.46894067e-05, 5.12648632e-05, 9.54546281e-06,
#         #                 7.19058265e-05, 7.12395076e-02, 3.71014939e-04,
#         #                 -1.17604303e-05],
#         #                [-2.30234865e-04, -1.00274994e-04, -1.13365546e-04,
#         #                 -3.98299986e-06, 4.11106306e-02, 7.20645619e-04,
#         #                 -9.89221913e-05],
#         #                [5.51587758e-05, -1.45330102e-04, -1.02668006e-04,
#         #                 -5.48750906e-05, -8.16977065e-05, 6.49893987e-02,
#         #                 2.70455047e-04],
#         #                [-1.13231778e-04, -1.03220510e-04, 1.51014645e-05,
#         #                 -4.52429416e-05, 3.21048212e-04, 4.98103832e-04,
#         #                 5.76697285e-02]]
#         #         , [[5.21730955e-02, 5.01364860e-04, 3.44009758e-02,
#         #             2.56918408e-04, -1.63087771e-03, -3.15762244e-04,
#         #             -1.96020498e-04, 1.03309641e-02, -1.98746306e-04,
#         #             1.19595667e-03, -5.66352187e-05, -3.63128574e-04,
#         #             2.17431143e-03, 1.07390210e-03],
#         #            [6.38472026e-04, 5.71040098e-02, 3.63208291e-05,
#         #             3.30061499e-02, 2.00009885e-03, 2.58694357e-03,
#         #             2.45456889e-04, -1.28405668e-04, 9.42744341e-03,
#         #             -1.14447353e-04, 1.15827061e-03, -2.10075812e-04,
#         #             -3.50133870e-03, -2.51433628e-04],
#         #            [1.96462449e-02, 1.49210667e-04, 2.11739007e-01,
#         #             -9.29434027e-04, 5.71319491e-04, 4.14095669e-04,
#         #             4.35163475e-05, 3.67329439e-03, -2.87648500e-04,
#         #             7.12593916e-03, -4.71455338e-05, -2.89563621e-04,
#         #             2.95455404e-04, 4.48840665e-05],
#         #            [1.36008395e-04, 2.23979883e-02, -1.91214118e-04,
#         #             2.09703408e-01, 4.77729341e-03, -5.75241697e-04,
#         #             -2.40792833e-05, -1.77949280e-04, 3.44435687e-03,
#         #             -1.36843859e-04, 7.02483834e-03, 1.68675557e-04,
#         #             3.71536159e-04, -2.58542816e-04],
#         #            [-1.23217850e-04, 1.71917383e-05, 4.56756223e-04,
#         #             -9.36457628e-05, 1.94814289e-01, 1.40341148e-04,
#         #             -1.41705368e-05, 4.97388640e-05, 5.90143283e-07,
#         #             -2.53089720e-05, 2.73236372e-05, 6.10153772e-03,
#         #             3.19269047e-04, -1.04978334e-04],
#         #            [-1.61471231e-04, -3.23539635e-05, 8.40353756e-05,
#         #             -6.97601781e-05, 2.00699976e-01, 3.22237822e-04,
#         #             -1.18968849e-04, -8.09336641e-06, -1.07041556e-04,
#         #             -9.98930459e-05, -3.60527361e-06, 6.93202220e-03,
#         #             1.31473312e-04, -5.03758539e-04],
#         #            [2.53388806e-04, 7.52827794e-04, -9.32178782e-05,
#         #             -4.27555189e-04, 1.94586722e-03, 4.40140807e-02,
#         #             -4.70792184e-04, 2.54588318e-04, -3.09535752e-04,
#         #             -3.98346139e-05, 5.34455964e-05, 2.90134733e-05,
#         #             5.48938514e-02, 1.05828285e-03],
#         #            [1.87349094e-04, -6.87968717e-05, 6.27404312e-04,
#         #             3.91400552e-05, 7.26489715e-04, -3.93929532e-04,
#         #             8.37337331e-03, 1.44977857e-04, -6.17575701e-05,
#         #             -1.19070897e-05, 5.47809286e-05, -1.74512623e-04,
#         #             1.17794883e-03, 6.03680075e-02]]],
#         #     'motorcycle': [[[8.82212087e-02, -1.97830338e-03, 2.55405278e-02,
#         #                      5.69759039e-04, -1.50233335e-04, 3.19155151e-05,
#         #                      -4.66887981e-05],
#         #                     [1.73995252e-03, 7.71052420e-02, -8.48809083e-04,
#         #                      2.85795328e-02, 6.00811338e-04, 7.37313447e-04,
#         #                      -7.37567204e-05],
#         #                     [9.13905768e-02, -5.29438005e-03, 1.16359781e-01,
#         #                      1.85557183e-03, -1.48424499e-04, 1.96173283e-03,
#         #                      -3.51852967e-05],
#         #                     [-3.13834597e-03, 7.90270515e-02, 1.36571363e-03,
#         #                      1.29732367e-01, 4.91972628e-04, -7.11439745e-04,
#         #                      -3.58508650e-04],
#         #                     [2.26067942e-03, -1.97542108e-03, -6.22452384e-04,
#         #                      6.29769208e-04, 8.98773196e-02, -4.63194098e-04,
#         #                      -1.87109980e-04],
#         #                     [4.82871537e-04, -8.18143233e-04, -2.84187393e-04,
#         #                      2.14529928e-05, 7.14795640e-02, 2.52334153e-04,
#         #                      -4.38961429e-04],
#         #                     [-1.66821124e-03, 1.44358118e-03, 4.48256723e-04,
#         #                      -1.51698484e-04, -1.00035234e-03, 8.73060996e-02,
#         #                      -2.56701477e-04],
#         #                     [5.01220560e-03, -3.04072492e-03, -1.29493366e-03,
#         #                      1.11101029e-03, 6.44107090e-04, -1.10153663e-03,
#         #                      4.63497781e-02]],
#         #                    [[6.84369501e-02, -2.92520592e-04, 1.52671914e-02,
#         #                      -3.31204020e-04, 4.76527422e-04, 1.29382738e-03,
#         #                      -9.07996976e-04],
#         #                     [-5.83203864e-04, 6.97225130e-02, -3.08540914e-05,
#         #                      1.56914282e-02, 2.00361334e-04, -9.03569936e-04,
#         #                      -9.49544773e-04],
#         #                     [5.03660387e-02, -6.38153404e-04, 3.27065090e-02,
#         #                      -1.31748089e-06, 2.42098215e-04, 8.51288992e-04,
#         #                      -9.79164114e-04],
#         #                     [-6.35652889e-04, 5.09520093e-02, -7.35045397e-05,
#         #                      3.29889955e-02, 4.40247420e-04, 1.77095623e-04,
#         #                      -1.91003342e-03],
#         #                     [8.46894067e-05, 5.12648632e-05, 9.54546281e-06,
#         #                      7.19058265e-05, 7.12395076e-02, 3.71014939e-04,
#         #                      -1.17604303e-05],
#         #                     [-2.30234865e-04, -1.00274994e-04, -1.13365546e-04,
#         #                      -3.98299986e-06, 4.11106306e-02, 7.20645619e-04,
#         #                      -9.89221913e-05],
#         #                     [5.51587758e-05, -1.45330102e-04, -1.02668006e-04,
#         #                      -5.48750906e-05, -8.16977065e-05, 6.49893987e-02,
#         #                      2.70455047e-04],
#         #                     [-1.13231778e-04, -1.03220510e-04, 1.51014645e-05,
#         #                      -4.52429416e-05, 3.21048212e-04, 4.98103832e-04,
#         #                      5.76697285e-02]]
#         #         , [[9.05203360e-02, -7.04999544e-04, 2.34039703e-02,
#         #             -1.33071752e-07, -5.20272537e-04, 3.47156953e-04,
#         #             -1.32279900e-03, 9.04371301e-03, 1.28644258e-04,
#         #             2.38681308e-03, -8.31844968e-06, 2.98447128e-04,
#         #             -8.39330392e-04, 3.08831401e-04],
#         #            [1.76947482e-03, 8.44272650e-02, -2.09554788e-04,
#         #             2.58028747e-02, -3.30216329e-04, -1.19127412e-05,
#         #             -4.07218343e-04, 2.28999864e-04, 8.30018773e-03,
#         #             9.01924997e-05, 1.99062964e-03, 6.57001567e-04,
#         #             -5.98396578e-04, 1.17017510e-05],
#         #            [8.35131177e-02, -4.29746863e-03, 1.18310622e-01,
#         #             -8.64240798e-05, -9.42994119e-04, -8.21708536e-04,
#         #             -2.18592834e-03, 8.16727323e-03, 3.43499198e-04,
#         #             1.16293016e-02, -2.85359796e-04, 8.74541362e-04,
#         #             -1.39213256e-03, 4.11188727e-03],
#         #            [-2.40412821e-03, 7.29650523e-02, 1.33266942e-03,
#         #             1.33843057e-01, 3.40059366e-04, 1.11588292e-04,
#         #             8.08925699e-04, -2.72271831e-04, 6.46756019e-03,
#         #             -1.02174721e-04, 1.06077583e-02, -8.43366797e-04,
#         #             6.48203800e-04, -1.62717456e-03],
#         #            [2.16379249e-03, -1.65726282e-03, -9.90111038e-04,
#         #             5.82961951e-04, 9.87505463e-02, 1.04118371e-03,
#         #             -6.40828958e-04, 2.03659942e-04, 8.49537324e-05,
#         #             1.14867905e-04, -9.75889563e-05, 2.15637870e-02,
#         #             -1.34153181e-04, 2.87156965e-04],
#         #            [1.78001420e-04, -5.29494859e-04, -2.24560359e-04,
#         #             -3.38394393e-06, 7.93887922e-02, 7.56264476e-06,
#         #             -6.34940847e-04, 1.83042494e-05, -6.31852408e-05,
#         #             3.89079245e-05, -1.01496243e-04, 1.65395102e-02,
#         #             1.22714514e-04, -1.01961303e-03],
#         #            [-1.17801063e-03, 7.82516350e-04, 2.38964177e-04,
#         #             -2.05403355e-04, 9.86534277e-04, 9.01792213e-02,
#         #             2.94806986e-04, -1.75308747e-04, 8.85723884e-05,
#         #             -2.13742842e-05, 4.94842005e-05, 2.59816668e-04,
#         #             3.42558106e-02, -3.82577137e-04],
#         #            [1.23653156e-03, -1.69227757e-03, -3.48664338e-04,
#         #             3.45603231e-04, 1.03277216e-03, 8.33430873e-04,
#         #             3.75776821e-02, 1.23246804e-04, 3.50164867e-04,
#         #             1.97335389e-04, -8.40648199e-05, 5.76171629e-04,
#         #             2.20291549e-04, 4.53024624e-02]]],
#         #     'bicycle': [[[5.48175898e-02, -4.75373813e-04, 3.26855957e-02,
#         #                   3.68354656e-04, -2.97977236e-04, 8.65865080e-04,
#         #                   5.58539013e-04],
#         #                  [-1.37973520e-03, 4.13412386e-02, 3.71064773e-04,
#         #                   3.72426856e-02, 4.52796366e-04, -1.23073908e-03,
#         #                   -1.20159741e-04],
#         #                  [3.52304293e-02, -2.10593772e-06, 1.31844216e-01,
#         #                   -6.53561165e-04, 2.02248672e-04, 4.14019992e-04,
#         #                   -1.62460522e-04],
#         #                  [-5.22707517e-04, 1.70648342e-02, 1.45832488e-04,
#         #                   2.17904842e-01, -3.95744937e-05, -5.60926238e-04,
#         #                   5.39767415e-04],
#         #                  [-1.66367652e-03, 1.79316619e-03, 5.10494915e-04,
#         #                   5.53795970e-04, 7.57447855e-02, 1.86624364e-04,
#         #                   1.46751724e-04],
#         #                  [1.78029750e-04, -4.08014238e-04, 7.32612066e-04,
#         #                   5.28689513e-04, 5.37265932e-02, 1.12112450e-03,
#         #                   7.16482450e-04],
#         #                  [5.09709984e-03, -3.25722709e-03, -7.85291853e-04,
#         #                   8.88902329e-05, 1.09769649e-04, 1.00205515e-01,
#         #                   -6.04519946e-04],
#         #                  [-1.23190159e-04, 4.64392054e-04, 3.75648191e-04,
#         #                   4.12271465e-05, -3.93833323e-04, -8.08698858e-04,
#         #                   6.48136246e-02]]
#         #         , [[6.20524839e-02, 5.93759378e-04, 1.11864913e-02,
#         #             5.73483250e-05, 9.17807034e-04, -1.27769224e-03,
#         #             -5.07940222e-04],
#         #            [1.21801910e-04, 6.14190639e-02, -2.35988017e-04,
#         #             1.11967496e-02, 1.78299624e-04, -1.90884916e-03,
#         #             1.22830676e-03],
#         #            [3.73163107e-02, 8.32030159e-05, 1.85843479e-02,
#         #             4.31810734e-07, 7.61937370e-04, -2.04681289e-05,
#         #             -1.06392808e-03],
#         #            [2.44690374e-04, 3.76287404e-02, -2.14129121e-04,
#         #             1.84358601e-02, 4.18245690e-04, -4.20715435e-04,
#         #             2.12076022e-03],
#         #            [2.93089931e-04, -3.46916462e-05, 3.75056615e-05,
#         #             1.03789531e-04, 7.09430172e-02, -1.49629786e-04,
#         #             5.24535908e-04],
#         #            [1.67502044e-04, 1.28410303e-04, 2.10053785e-04,
#         #             9.02826413e-05, 4.15259882e-02, -4.16515786e-04,
#         #             6.64700018e-04],
#         #            [1.87836976e-06, -1.63975695e-04, 2.97297022e-05,
#         #             4.18191065e-06, 3.05731267e-04, 6.64400652e-02,
#         #             3.18696911e-04],
#         #            [-3.23566601e-04, 3.27118992e-04, -1.53779102e-04,
#         #             1.07415077e-04, 1.67625290e-05, -6.03305951e-04,
#         #             5.78542222e-02]], [[6.58628379e-02, 4.04529084e-04, 3.03027572e-02,
#         #                                 4.11068968e-04, 3.37632716e-05, -2.62372579e-03,
#         #                                 1.76407807e-04, 6.37381115e-03, 1.88245345e-05,
#         #                                 9.53888133e-04, 4.87463155e-06, -6.63655664e-04,
#         #                                 1.46907482e-03, -3.25660650e-04],
#         #                                [-2.02123716e-04, 6.02857500e-02, -6.54737442e-04,
#         #                                 3.58469714e-02, -1.41130234e-03, 3.53165510e-03,
#         #                                 1.45367138e-04, 3.18231208e-05, 5.20621260e-03,
#         #                                 -5.20162687e-05, 3.60117715e-04, 8.03063211e-04,
#         #                                 -4.68209042e-03, 3.18606964e-04],
#         #                                [3.25000744e-02, -2.05307544e-04, 1.41949691e-01,
#         #                                 -8.33637129e-06, 3.42058073e-05, -2.78661717e-03,
#         #                                 1.44598834e-04, 3.09471801e-03, -1.08972383e-04,
#         #                                 4.42206728e-03, 1.25738713e-04, -8.20056186e-04,
#         #                                 1.90261797e-03, 2.58954889e-04],
#         #                                [8.35671090e-04, 1.58131890e-02, 1.29715975e-04,
#         #                                 2.35700929e-01, -5.03856014e-04, 1.48611612e-03,
#         #                                 -4.01884522e-04, -8.31021579e-06, 1.42602799e-03,
#         #                                 -6.96365407e-05, 2.46707214e-03, 3.28978408e-04,
#         #                                 -1.36295683e-03, 7.65700145e-06],
#         #                                [-1.28848243e-03, -5.19250620e-04, 3.42042908e-04,
#         #                                 3.59459815e-04, 7.72901594e-02, 7.42861310e-03,
#         #                                 -1.12171229e-03, -1.63326545e-04, 8.77133481e-05,
#         #                                 -1.57594618e-05, -1.54271735e-06, 3.03462005e-02,
#         #                                 -5.71988652e-03, -2.75550672e-05],
#         #                                [-1.35468719e-03, -9.80105566e-04, 1.02539311e-04,
#         #                                 -6.99699208e-04, 5.74730909e-02, 2.87173199e-03,
#         #                                 -3.09191835e-04, -1.82168954e-05, 1.85583285e-05,
#         #                                 -1.10855839e-04, -6.11353090e-05, 2.23739502e-02,
#         #                                 -1.24428899e-03, 1.93675520e-05],
#         #                                [1.30139290e-03, -1.30568147e-04, -5.00517354e-04,
#         #                                 -2.06229224e-04, 2.90479554e-03, 8.95315903e-02,
#         #                                 1.32453730e-03, 1.88356186e-04, -6.56992842e-04,
#         #                                 1.37360779e-04, -4.59614995e-05, -3.19106406e-03,
#         #                                 4.50081317e-02, -9.16589647e-04],
#         #                                [4.34171450e-05, 9.77144401e-05, -1.29775530e-04,
#         #                                 -1.77042080e-04, -7.05247776e-05, 9.32420835e-04,
#         #                                 6.70377585e-02, 6.14369655e-05, 1.94646642e-04,
#         #                                 6.99242892e-05, -3.34812342e-05, 4.07672677e-05,
#         #                                 -1.30450111e-03, 3.31007445e-02]]],
#         #     'pedestrian': [[[5.80206471e-02, 5.68501114e-04, 3.24998475e-02,
#         #                      -4.93777963e-04, 1.64943573e-04, 2.11128368e-04,
#         #                      -4.57683124e-04],
#         #                     [2.81483884e-04, 5.13787367e-02, -1.01557265e-03,
#         #                      3.50583427e-02, -1.20739021e-06, 6.35583178e-05,
#         #                      1.17326055e-04],
#         #                     [3.81306287e-02, -3.54529417e-04, 1.31741209e-01,
#         #                      1.17359874e-03, -3.72711024e-04, -1.13071657e-04,
#         #                      -2.00577849e-04],
#         #                     [2.54325550e-04, 2.71527191e-02, 5.54667279e-05,
#         #                      1.60905395e-01, 1.20238671e-04, 5.47893179e-04,
#         #                      -1.68915695e-04],
#         #                     [2.38241642e-03, -2.31823658e-04, 3.85962974e-04,
#         #                      -9.89322483e-04, 1.21720494e-01, -6.04513430e-04,
#         #                      2.81230026e-05],
#         #                     [4.47407415e-04, 3.62121669e-04, 3.25778096e-04,
#         #                      -1.24398676e-03, 1.50945917e-01, -2.45660873e-03,
#         #                      1.04555831e-03],
#         #                     [5.97965108e-04, -5.35621807e-04, -3.28765493e-04,
#         #                      5.54309788e-04, 1.01470826e-04, 4.28201582e-02,
#         #                      8.93958848e-05],
#         #                     [-4.41964929e-04, 4.77364775e-04, -1.29700568e-04,
#         #                      3.38832163e-04, 6.10584705e-05, 2.40025538e-04,
#         #                      4.13180541e-02]]
#         #         , [[5.48584889e-02, -4.36223312e-04, 8.39198622e-03,
#         #             -1.06704996e-04, -1.12049718e-03, 1.27878134e-03,
#         #             -9.55176673e-05],
#         #            [-5.84901503e-05, 5.65018918e-02, 1.54107072e-04,
#         #             8.61906525e-03, 1.18307050e-04, -1.49093883e-03,
#         #             -1.71993233e-04],
#         #            [2.80191182e-02, 8.24758430e-05, 1.16154471e-02,
#         #             -7.92701759e-05, -3.40208374e-04, 7.41886799e-04,
#         #             -5.64588693e-04],
#         #            [2.52168068e-04, 2.88814727e-02, 1.00139782e-04,
#         #             1.21215545e-02, 6.40325270e-04, -1.23331599e-03,
#         #             -3.06080723e-04],
#         #            [-2.97636034e-04, 2.03201586e-04, -1.85654408e-06,
#         #             2.12647770e-04, 1.14551887e-01, 7.64300129e-04,
#         #             -5.41677164e-04],
#         #            [5.73815723e-05, -1.95496670e-04, 1.43886556e-04,
#         #             1.84494728e-04, 1.23919511e-01, 6.77196397e-04,
#         #             -5.36114445e-04],
#         #            [1.67759060e-04, -1.82375534e-05, 7.39332255e-05,
#         #             1.02856205e-05, 1.63889994e-04, 4.56844224e-02,
#         #             9.90436419e-05],
#         #            [-1.44108412e-04, 2.14883760e-04, -4.30045836e-05,
#         #             -3.98828574e-05, 4.34505444e-05, 5.98854729e-04,
#         #             4.12750431e-02]]
#         #         , [[8.26986366e-02, -1.92271064e-04, 2.98832030e-02,
#         #             -9.09764427e-04, 3.60230285e-05, 5.11082098e-04,
#         #             3.74602276e-05, 3.25383978e-03, 1.98119738e-05,
#         #             4.50184420e-04, -6.76155158e-05, 1.41799129e-05,
#         #             2.34133009e-04, 1.77253556e-04],
#         #            [-2.50432627e-04, 7.72773272e-02, -4.59742677e-04,
#         #             3.36008066e-02, 8.21638752e-05, -5.26283456e-04,
#         #             8.08747593e-04, -9.08766014e-06, 3.12091867e-03,
#         #             -3.16103628e-05, 3.29406507e-04, -1.39768155e-06,
#         #             -2.28865612e-04, 2.48726006e-04],
#         #            [3.51786043e-02, -5.16436406e-05, 1.48878327e-01,
#         #             4.19379707e-04, -9.41883923e-05, 9.28980396e-04,
#         #             2.09274264e-04, 1.43277808e-03, -1.67789521e-04,
#         #             1.98511627e-03, 1.76130280e-04, 2.57167196e-04,
#         #             -2.77514338e-06, -2.75962267e-04],
#         #            [-4.13610279e-04, 2.62853675e-02, -3.08107097e-04,
#         #             1.80292336e-01, 1.32789195e-04, 3.77260602e-04,
#         #             6.77206540e-04, -3.54553498e-06, 8.91900961e-04,
#         #             -6.25632495e-05, 1.63145612e-03, -2.02975659e-06,
#         #             2.10906166e-04, -3.09740925e-04],
#         #            [2.75356878e-04, 1.35509772e-04, 8.45374166e-04,
#         #             2.31000085e-04, 8.94440580e-02, 3.85040907e-04,
#         #             7.71279165e-06, 6.80200243e-06, -7.45795526e-06,
#         #             1.44431865e-04, -2.02026337e-05, 5.64148592e-02,
#         #             3.30882373e-04, 3.35376145e-04],
#         #            [-1.74481493e-03, -1.59061538e-04, -1.49604113e-03,
#         #             1.76792236e-03, 1.19339912e-01, 1.49050586e-03,
#         #             -9.88822696e-05, -2.87789721e-04, -2.34246223e-05,
#         #             1.39953297e-04, 1.27519086e-05, 7.56858377e-02,
#         #             1.81678199e-03, 1.11598511e-04],
#         #            [-6.90893890e-04, 7.44579585e-05, 4.15505434e-04,
#         #             5.58333285e-04, 1.51455685e-04, 5.39132098e-02,
#         #             4.37758112e-04, 6.18251649e-05, -1.27987179e-05,
#         #             -2.60218940e-05, 3.16104443e-05, 3.39910456e-05,
#         #             2.63795581e-02, 2.40390089e-04],
#         #            [-1.15541826e-04, 8.14018563e-04, -3.97795627e-05,
#         #             -5.68761617e-04, 6.31398562e-05, 2.51559884e-04,
#         #             5.34063520e-02, 3.91216691e-05, -7.13225812e-05,
#         #             -6.32649568e-05, 3.16548985e-05, -4.58578166e-06,
#         #             -8.82563986e-05, 2.10376068e-02]]]
#         # }
#         Gain_dict=gain_dict10000
#         if (type in [0, 1, 2]):
#             self.Gain=Gain_dict['car']
#         if (type ==100):
#             #truck
#             self.Gain = Gain_dict['truck']
#         if (type ==200):
#             #motorcycle
#             self.Gain = Gain_dict['motorcycle']
#         if (type ==500):
#             #bicycle
#             self.Gain = Gain_dict['bicycle']
#         if (type in [300,301,302,303,304,305,306]):
#             #pedestrian
#             self.Gain = Gain_dict['pedestrian']
#         #print(type)
#         dt = 0.05
#         self.F = np.array([
#             [1, 0, dt, 0, 0, 0, 0, 0],
#                       [0, 1, 0, dt, 0, 0, 0, 0],
#                       [0, 0, 1, 0, 0, 0, 0, 0],
#                       [0, 0, 0, 1, 0, 0, 0, 0],
#                       [0, 0, 0, 0, 1, dt, 0, 0],
#                       [0, 0, 0, 0, 0, 1, 0, 0],
#                       [0, 0, 0, 0, 0, 0, 1, 0],
#                       [0, 0, 0, 0, 0, 0, 0, 1],
#                       ])
#         self.single_sensor_H = np.array(
#             [[1, 0, 0, 0, 0, 0, 0, 0],
#              [0, 1, 0, 0, 0, 0, 0, 0],
#              [0, 0, 1, 0, 0, 0, 0, 0],
#              [0, 0, 0, 1, 0, 0, 0, 0],
#              [0, 0, 0, 0, 1, 0, 0, 0],
#              [0, 0, 0, 0, 0, 0, 1, 0],
#              [0, 0, 0, 0, 0, 0, 0, 1],
#              ])
#         self.double_sensor_H=np.concatenate((self.single_sensor_H, self.single_sensor_H), axis=0)
#     def reset(self):
#         #需要初始化的flag
#         self.init_flag=1
#     def predict(self):
#         self.x=np.matmul(self.F,self.x)
#     def update(self,Z,sensor_id_list):
#         #Z默认行向量的list
#         if (self.init_flag==1):
#             self.x=np.zeros(8)
#             Z_ave=Z.mean(axis=0)
#             for i in range(7):
#                 if i<=4:
#                     self.x[i]=Z_ave[i]
#                 else:
#                     self.x[i+1] = Z_ave[i]
#             #角速度为0
#             self.x[5]=0
#             self.x.reshape(1,8)
#             self.init_flag =0
#             return self.x
#         if (sensor_id_list==[0]):
#             self.predict()
#             Z = Z.reshape(7)
#             innovation=Z.T-np.matmul(self.single_sensor_H,self.x.T)
#             self.x=self.x+np.matmul(self.Gain[0],innovation)
#             return self.x
#
#         if (sensor_id_list==[1]):
#             self.predict()
#             Z = Z.reshape(7)
#             innovation=Z.T-np.matmul(self.single_sensor_H,self.x)
#             self.x=self.x+np.matmul(self.Gain[1],innovation)
#             return self.x
#
#         if (sensor_id_list==[0,1]):
#             self.predict()
#             Z = Z.reshape(14)
#             innovation=Z.T-np.matmul(self.double_sensor_H,self.x)
#             self.x=self.x+np.matmul(self.Gain[2],innovation)
#             return self.x
#
# class KalmanFiltertkm:
#     def __init__(self,type):
#         # initialization
#         self.reset()
#         #filterpy KF 包
#         self.KF_PP=KalmanFilter(dim_x=8, dim_z=7)
#         self.KF_CAMERA=KalmanFilter(dim_x=8, dim_z=7)
#         self.KF_FUSION=KalmanFilter(dim_x=8, dim_z=14)
#         #pointpillars 噪声集合
#         self.zeta_pp_std_dict = {'car': np.array([0.156542, 0.156782, 0.204562, 0.204372, 0.0539065, 0.1422, 0.300395]),
#                                  'truck': np.array(
#                                      [0.242003, 0.22136, 0.182274, 0.18387, 0.0512348, 0.196486, 0.62748]),
#                                  'motorcycle': np.array(
#                                      [0.174625, 0.171801, 0.310305, 0.281624, 0.129888, 0.124326, 0.250365]),
#                                  'bicycle': np.array(
#                                      [0.172047, 0.158349, 0.176279, 0.10358, 0.170722, 0.109118, 0.164872]),
#                                  'pedestrian': np.array(
#                                      [0.11024, 0.110815, 0.118911, 0.0969855, 0.22248, 0.140461, 0.146782])
#                                  }
#         #sensor1 camera 噪声
#         self.zeta_camera_std=np.array([0.55,0.55,1,1,0.28,0.2,0.233])
#         self.zeta_pp_std=0
#         dt=0.05
#         E=np.array([[0.5*dt**2, 0, 0, 0, 0],
#                   [0, 0.5*dt**2, 0, 0, 0],
#                   [dt, 0, 0, 0, 0],
#                   [0, dt, 0, 0, 0],
#                   [0, 0, 0.5*dt**2, 0, 0],
#                   [0, 0, dt, 0, 0],
#                   [0, 0, 0, 1, 0],
#                   [0, 0, 0, 0, 1],
#                   ])
#         F=np.array([[1, 0, dt, 0, 0, 0, 0, 0],
#                     [0, 1, 0, dt, 0, 0, 0, 0],
#                     [0, 0, 1, 0, 0, 0, 0, 0],
#                     [0, 0, 0, 1, 0, 0, 0, 0],
#                     [0, 0, 0, 0, 1, dt, 0, 0],
#                     [0, 0, 0, 0, 0, 1, 0, 0],
#                     [0, 0, 0, 0, 0, 0, 1, 0],
#                     [0, 0, 0, 0, 0, 0, 0, 1],
#                     ])
#
#         if (type in [0,1,2,3,4,1000]):
#             #car
#             xi_mean = np.array([0, 0, 0, 0, 0])
#             self.xi_std = np.array([0.8333, 0.8333, 0.1745, 0.01, 0.01])
#             self.xi_std =np.reshape(self.xi_std, (1, 5))
#             #Q是E[EQE^T]
#             q = self.xi_std * self.xi_std
#             Q_in= np.diagflat(q)
#             self.Q = np.matmul(np.matmul(E,Q_in),E.T)
#             self.zeta_pp_std = self.zeta_pp_std_dict['car']
#             self.set_common_setting(F,self.Q)
#             #print(self.Q)
#             pass
#         if (type ==100,2000):
#             #truck
#             self.xi_mean = np.array([0, 0, 0, 0, 0])
#             #self.xi_std = np.array([0.8333, 0.8333, 0.1745, 0.01, 0.01])
#             self.xi_std = np.array([1.6667, 1.6667, 0.34906, 0.01, 0.01])
#             self.xi_std = np.reshape(self.xi_std, (1, 5))
#             # Q是E[EQE^T]
#             q = self.xi_std * self.xi_std
#             Q_in = np.diagflat(q)
#             self.Q = np.matmul(np.matmul(E, Q_in), E.T)
#             self.zeta_pp_std = self.zeta_pp_std_dict['truck']
#             self.set_common_setting(F, self.Q)
#             #print(self.Q)
#             pass
#         if (type ==200):
#             #motorcycle
#             self.xi_mean = np.array([0, 0, 0, 0, 0])
#             self.xi_std = np.array([0.8333, 0.8333, 0.1745, 0.01, 0.01])
#             self.xi_std = np.reshape(self.xi_std, (1, 5))
#             # Q是E[EQE^T]
#             q = self.xi_std * self.xi_std
#             Q_in = np.diagflat(q)
#             self.Q = np.matmul(np.matmul(E, Q_in), E.T)
#             self.zeta_pp_std = self.zeta_pp_std_dict['motorcycle']
#             self.set_common_setting(F, self.Q)
#             #print(self.Q)
#             pass
#         if (type ==500):
#             #bicycle
#             self.xi_mean =np.array([0, 0, 0, 0, 0])
#             self.xi_std = np.array([0.5,0.5,0.1745,0.01,0.01])
#             self.xi_std = np.reshape(self.xi_std, (1, 5))
#             # Q是E[EQE^T]
#             q = self.xi_std * self.xi_std
#             Q_in = np.diagflat(q)
#             self.Q = np.matmul(np.matmul(E, Q_in), E.T)
#             self.zeta_pp_std = self.zeta_pp_std_dict['bicycle']
#             self.set_common_setting(F, self.Q)
#             #print(self.Q)
#             pass
#         if (type in [300,301,302,303,304,305,306]):
#             #pedestrian
#             self.xi_mean = np.array([0, 0, 0, 0, 0])
#             self.xi_std = np.array([0.3333,0.3333,0.6981,0.005,0.005])
#             self.xi_std = np.reshape(self.xi_std, (1, 5))
#             # Q是E[EQE^T]
#             q = self.xi_std * self.xi_std
#             Q_in = np.diagflat(q)
#             self.Q = np.matmul(np.matmul(E, Q_in), E.T)
#             self.zeta_pp_std = self.zeta_pp_std_dict['pedestrian']
#             self.set_common_setting(F, self.Q)
#             #print(self.Q)
#             pass
#
#         #配置R
#         zeta = self.zeta_pp_std.reshape(1, 7)
#         R = zeta*zeta
#         self.KF_PP.R = np.diagflat(R)
#         zeta = self.zeta_camera_std.reshape(1, 7)
#         R = zeta*zeta
#         self.KF_CAMERA.R = np.diagflat(R)
#         zeta = np.append(self.zeta_pp_std, self.zeta_camera_std).reshape(1, 14)
#         R = zeta* zeta
#         self.KF_FUSION.R=np.diagflat(R)
#         #配置观测矩阵
#         single_sensor_H=np.array(
#         [[1, 0, 0, 0, 0, 0, 0, 0],
#          [0, 1, 0, 0, 0, 0, 0, 0],
#          [0, 0, 1, 0, 0, 0, 0, 0],
#          [0, 0, 0, 1, 0, 0, 0, 0],
#          [0, 0, 0, 0, 1, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 1, 0],
#          [0, 0, 0, 0, 0, 0, 0, 1],
#          ])
#         self.KF_PP.H=single_sensor_H
#         self.KF_CAMERA.H=single_sensor_H
#         self.KF_FUSION.H=np.concatenate((single_sensor_H, single_sensor_H), axis=0)
#
#     def set_common_setting(self,F,Q):
#         self.KF_PP.F=F
#         self.KF_CAMERA.F=F
#         self.KF_FUSION.F=F
#         self.KF_PP.Q = Q
#         self.KF_CAMERA.Q = Q
#         self.KF_FUSION.Q = Q
#
#     def reset(self):
#         self.P = 2000*np.eye(8)
#         self.x = np.zeros(8)
#     def update(self,Z,sensor_id_list):
#         #默认pointpillars为0号
#         if (sensor_id_list==[0]):
#             Z=Z.reshape(7)
#             self.KF_PP.P=self.P
#             self.KF_PP.x=self.x
#             self.KF_PP.predict()
#             self.KF_PP.update(Z)
#             #取出估计参数
#             self.P=self.KF_PP.P
#             self.x=self.KF_PP.x
#             return self.x
#         if (sensor_id_list==[1]):
#             Z = Z.reshape(7)
#             self.KF_CAMERA.P = self.P
#             self.KF_CAMERA.x = self.x
#             self.KF_CAMERA.predict()
#             self.KF_CAMERA.update(Z)
#             # 取出估计参数
#             self.P = self.KF_CAMERA.P
#             self.x = self.KF_CAMERA.x
#             return self.x
#         if (sensor_id_list==[0,1]):
#             Z = Z.reshape(14)
#             self.KF_FUSION.P = self.P
#             self.KF_FUSION.x = self.x
#             self.KF_FUSION.predict()
#             self.KF_FUSION.update(Z)
#             # 取出估计参数
#             self.P = self.KF_FUSION.P
#             self.x = self.KF_FUSION.x
#             return self.x
#         print("no match KF")
#
#
#
# # def demo():
# #     dt = 0.1
# #     F = np.array([[1, dt], [0, 1]])
# #     Q = 1e-2 * np.array([[1 / 4 * dt ** 4, 1 / 2 * dt ** 3], [1 / 2 * dt ** 3, dt ** 2]])
# #     R = 2.
# #     itr = 100
# #
# #     real_state = []
# #     x = np.array([10, 5]).reshape(2, 1)
# #
# #     for i in range(itr):
# #         real_state.append(x[0, 0])
# #         x = np.dot(F, x) + np.random.multivariate_normal(mean=(0, 0), cov=Q).reshape(2, 1)
# #
# #     measurements = [x + np.random.normal(0, R) for x in real_state]
# #
# #     # initialization
# #     P = np.array([[10, 5], [5, 10]])
# #     x = np.random.multivariate_normal(mean=(10, 5), cov=P).reshape(2, 1)
# #
# #     # filter
# #     kf = KalmanFilter(dim_x=2, dim_z=1)  # dim_x:隐状态大小，dim_z:量测大小
# #     # 定义参数
# #     kf.x = x  # 初始状态[位置,速度]
# #     kf.F = F  # 状态转移矩阵
# #     kf.H = np.array([[1., 0.]])  # 量测矩阵
# #     kf.P = P  # 初始状态协方差
# #     kf.R = R  # 量测噪声
# #     kf.Q = Q_discrete_white_noise(dim=2, dt=dt, var=1e-2)  # 过程（系统）噪声
# #
# #     filter_result = list()
# #     filter_result.append(x)
# #     for i in range(1, itr):
# #         z = measurements[i]
# #         kf.predict()
# #         kf.update(z)
# #         filter_result.append(kf.x)
# #     filter_result = np.squeeze(np.array(filter_result))
# #
# #     return measurements, real_state, filter_result
# #
# #
# # def plot_result(measurements, real_state, filter_result):
# #     plt.figure(figsize=(8, 4))
# #     plt.plot(range(1, len(measurements)), measurements[1:], label='Measurements')
# #     plt.plot(range(1, len(real_state)), real_state[1:], label='Real statement')
# #     plt.plot(range(1, len(filter_result)), np.array(filter_result)[1:, 0], label='Kalman Filter')
# #     plt.legend()
# #     plt.xlabel('Time', fontsize=14)
# #     plt.ylabel('velocity [m]', fontsize=14)
# #     plt.show()
# #
# #     plt.figure(figsize=(8, 4))
# #     plt.axhline(5, label='Real statement')  # , label='$GT_x(real)$'
# #     plt.plot(range(1, len(filter_result)), np.array(filter_result)[1:, 1], label='Kalman Filter')
# #     plt.legend()
# #     plt.xlabel('Time', fontsize=14)
# #     plt.ylabel('velocity [m]', fontsize=14)
# #     plt.show()
#
#
# if __name__ == '__main__':
#     z=np.random.rand(7)
#     zz=np.random.rand(14)
#     KF=KalmanFiltertkm(1)
#     result=[]
#
#     AOFFilter(1)
#     AOFFilter(100)
#     AOFFilter(200)
#     AOFFilter(300)
#     AOFFilter(500)
#
#
#
#     # for i in range(100):
#     #     tmp=KF.update(zz,[0,1])
#     #     result.append(tmp)
#     # plt.plot(result)
#     # plt.show()
#     # measurements, real_state, filter_result = demo()
#     # plot_result(measurements, real_state, filter_result)
